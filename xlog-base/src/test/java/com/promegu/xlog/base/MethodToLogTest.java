package com.promegu.xlog.base;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;

import org.junit.Test;

import java.lang.reflect.Member;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.is;

/**
 * Created by guyacong on 2015/7/8.
 */
public class MethodToLogTest {

    // generated by XLogProcessor
    public static  final String METHODS_TO_LOG
            = "[{\"type\":1, \"className\":\"com.promegu.xlog.base.TestMatchMethod.InnerClass\", \"methodName\":\"<init>\", \"parameterClasses\":[], \"parameterNames\":[]},{\"type\":0, \"className\":\"com.promegu.xlog.base.TestMatchMethod.InnerClass\", \"methodName\":\"innerMethod\", \"parameterClasses\":[], \"parameterNames\":[]},{\"type\":0, \"className\":\"com.promegu.xlog.base.TestMatchMethod.InnerClass\", \"methodName\":\"innerMethod\", \"parameterClasses\":[\"int\"], \"parameterNames\":[\"i\"]},{\"type\":0, \"className\":\"com.promegu.xlog.base.TestMatchMethod.InnerClass\", \"methodName\":\"innerMethod\", \"parameterClasses\":[\"com.promegu.xlog.base.MethodToLog\"], \"parameterNames\":[\"methodToLog\"]},{\"type\":1, \"className\":\"com.promegu.xlog.base.TestMatchMethod.StaticNestedClass\", \"methodName\":\"<init>\", \"parameterClasses\":[], \"parameterNames\":[]},{\"type\":0, \"className\":\"com.promegu.xlog.base.TestMatchMethod.StaticNestedClass\", \"methodName\":\"innerMethod\", \"parameterClasses\":[], \"parameterNames\":[]},{\"type\":0, \"className\":\"com.promegu.xlog.base.TestMatchMethod.StaticNestedClass\", \"methodName\":\"innerMethod\", \"parameterClasses\":[\"int\"], \"parameterNames\":[\"i\"]},{\"type\":0, \"className\":\"com.promegu.xlog.base.TestMatchMethod.StaticNestedClass\", \"methodName\":\"innerMethod\", \"parameterClasses\":[\"com.promegu.xlog.base.MethodToLog\"], \"parameterNames\":[\"methodToLog\"]},{\"type\":1, \"className\":\"com.promegu.xlog.base.TestMatchMethod\", \"methodName\":\"<init>\", \"parameterClasses\":[], \"parameterNames\":[]},{\"type\":1, \"className\":\"com.promegu.xlog.base.TestMatchMethod\", \"methodName\":\"<init>\", \"parameterClasses\":[\"int\"], \"parameterNames\":[\"anInt\"]},{\"type\":1, \"className\":\"com.promegu.xlog.base.TestMatchMethod\", \"methodName\":\"<init>\", \"parameterClasses\":[\"int\",\"java.lang.Long\",\"com.promegu.xlog.base.MethodToLog\"], \"parameterNames\":[\"anInt\",\"aLong\",\"methodToLog\"]},{\"type\":0, \"className\":\"com.promegu.xlog.base.TestMatchMethod\", \"methodName\":\"method1\", \"parameterClasses\":[], \"parameterNames\":[]},{\"type\":0, \"className\":\"com.promegu.xlog.base.TestMatchMethod\", \"methodName\":\"method1\", \"parameterClasses\":[\"com.promegu.xlog.base.MethodToLog\"], \"parameterNames\":[\"methodToLog\"]},{\"type\":0, \"className\":\"com.promegu.xlog.base.TestMatchMethod\", \"methodName\":\"method1\", \"parameterClasses\":[\"int\",\"java.lang.Integer\"], \"parameterNames\":[\"i\",\"j\"]}]";

    @Test
    public void testMatchMethodOrConstructor() {
        List<MethodToLog> methodToLogs = new Gson()
                .fromJson(METHODS_TO_LOG, new TypeToken<List<MethodToLog>>() {
                }.getType());

        Set<Member> methods = new HashSet<>();
        methods.addAll(Arrays.asList(TestMatchMethod.class.getDeclaredMethods()));
        methods.addAll(Arrays.asList(TestMatchMethod.class.getDeclaredConstructors()));
        methods.addAll(Arrays.asList(TestMatchMethod.InnerClass.class.getDeclaredMethods()));
        methods.addAll(Arrays.asList(TestMatchMethod.InnerClass.class.getDeclaredConstructors()));
        methods.addAll(Arrays.asList(TestMatchMethod.StaticNestedClass.class.getDeclaredMethods()));
        methods.addAll(
                Arrays.asList(TestMatchMethod.StaticNestedClass.class.getDeclaredConstructors()));

        for (Member member : methods) {
            int matchCount = 0;

            for (MethodToLog methodToLog : methodToLogs) {
                if (methodToLog.matchMethodOrConstructor(member)) {
                    matchCount++;
                }
            }

            // ensure every method match 1 time
            assertThat(matchCount, is(1));
        }

        // ensure every method is tested
        assertThat(methodToLogs.size(), is(methods.size()));
    }

}
